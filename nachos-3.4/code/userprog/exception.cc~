// exception.cc 
//	Entry point into the Nachos kernel from user programs.
//	There are two kinds of things that can cause control to
//	transfer back to here from user code:
//
//	syscall -- The user code explicitly requests to call a procedure
//	in the Nachos kernel.  Right now, the only function we support is
//	"Halt".
//
//	exceptions -- The user code does something that the CPU can't handle.
//	For instance, accessing memory that doesn't exist, arithmetic errors,
//	etc.  
//
//	Interrupts (which can also cause control to transfer from user
//	code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"

//----------------------------------------------------------------------
// ExceptionHandler
// 	Entry point into the Nachos kernel.  Called when a user program
//	is executing, and either does a syscall, or generates an addressing
//	or arithmetic exception.
//
// 	For system calls, the following is the calling convention:
//
// 	system call code -- r2
//		arg1 -- r4
//		arg2 -- r5
//		arg3 -- r6
//		arg4 -- r7
//
//	The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//	"which" is the kind of exception.  The list of possible exceptions 
//	are in machine.h.
//----------------------------------------------------------------------

#define MAX_INT32_LENGTH	5

void ExceptionHandler_NonSyscall(ExceptionType which, int type) {
    /*
    Handle non-syscall exceptions
    @param which: Exception type, type: syscall codes in r2
    @return void
    */
	switch (which){	case PageFaultException: {
			printf("No valid translation found/%d %d\n", which, type);
			ASSERT(FALSE);
		}
		case ReadOnlyException: {
			printf("Write attempted on page marked 'read-only'/%d %d\n", which, type);
			ASSERT(FALSE); 
		}
		case BusErrorException: {
			printf("Translation result in an invalid physical address/%d %d\n", which, type);
			ASSERT(FALSE);
		}
		case AddressErrorException: {
			printf("Unaligned reference or one that was beyond the endof the address space/%d %d\n", which, type);
			ASSERT(FALSE); 
		}
		case OverflowException: {
			printf("Interger overflow in add or sub/%d %d\n", which, type);
			ASSERT(FALSE);
		}
		case IllegalInstrException: {
			printf("Unimplemented or reserved instruction/%d %d\n", which, type);
			ASSERT(FALSE);
		}
		case NumExceptionTypes: {}
		default: {
			printf("Unexpected user mode exception %d %d\n", which, type);
			ASSERT(FALSE);
		}
	}

    if ((which == SyscallException) && (type == SC_Halt)) {
	DEBUG('a', "Shutdown, initiated by user program.\n");
   	interrupt->Halt();
    } else {
	printf("Unexpected user mode exception %d %d\n", which, type);
	ASSERT(FALSE);
    }
}

void
ExceptionHandler(ExceptionType which)
{
    int type = machine->ReadRegister(2);
    if (which == NoException)
        return;
    else if (which == SyscallException) {
        switch (type) {
                case SC_Halt:
                {
	                DEBUG('a', "Shutdown, initiated by user program.\n");
   	                interrupt->Halt();
                    break;
                }
                case SC_Exit:{
   	                Exit(0);
                    break;
                }
                // case SC_Exec:{
                // 
                // }
                // case SC_Join:{}
                // case SC_Create:{}
                // case SC_Open:{}
                // case SC_Read:{}
                // case SC_Close:{}
                // case SC_Fork:{}
                // case SC_Yield:{}
		case SC_ReadInt: {
			DEBUG('a', "Reached ReadInt");
			int numberRead = 0;
			int numberOfDigits = 0;
			int negativeModifier = 1;
			bool isInt = true;
			char* OneByteBuffer = new char[2]; //preserved for terminated char
			
			int consoleStatusNum = 0;
			do {
				consoleStatusNum = gSynchConsole->Read(OneByteBuffer, 1);
				if (consoleStatusNum != 1) {  // ^D, CR, etc
					break;  
				}
				if ((OneByteBuffer[0] < 48) || (OneByteBuffer[0] > 57)) {
					if (numberOfDigits == 0) {
						if (OneByteBuffer[0] == '-') {
							negativeModifier = -1;
						} else {
							break;
						}
					} else {
						isInt = false;
						break;
					}
				} else {
					numberRead *= 10;
					numberRead += (OneByteBuffer[0] - 48);
					++numberOfDigits;
				}
			} while (numberOfDigits < MAX_INT32_LENGTH);
			numberRead *= isInt;
			numberRead *= negativeModifier;
			machine->WriteRegister(2, numberRead);
			
			delete[]OneByteBuffer;
			printf("\n\n\tThe number read = %d\n", numberRead); // DEGBUG MESSAGE, TO BE DELETE
		}			
			break;
		case SC_PrintInt: {
			int numberToPrint = machine->ReadRegister(4);

			char* buffer = new char[MAX_INT32_LENGTH + 2]; // preserved for negative and terminated \0
			int bufferCurrentPositionPtr = 0;	
			int numberLength = 0;		
			if (numberToPrint < 0) {
				buffer[bufferCurrentPositionPtr++] = '-';
				numberToPrint = -numberToPrint;		
				++numberLength;	
			}

			int maskNum = 1;
			for (int numberToPrintCopy = numberToPrint; numberToPrintCopy != 0; numberToPrintCopy /= 10) {
				maskNum *= 10;
				++numberLength;
			}  // loop to ensure flexibility
			maskNum /= 10;
	
			do {
				buffer[bufferCurrentPositionPtr++] = (numberToPrint / maskNum) + 48;
				numberToPrint %= maskNum;
				maskNum /= 10;
			} while (maskNum != 0);
			buffer[bufferCurrentPositionPtr] = 0;
			
			printf("%d\n", numberLength); // DBG
			
			gSynchConsole->Write(buffer, numberLength);
			delete[]buffer;
		}
			break;
                default:{}
        }
	// Advance program counters.

    	machine->registers[PrevPCReg] = machine->registers[PCReg];
    	machine->registers[PCReg] = machine->registers[NextPCReg];
    	machine->registers[NextPCReg] += 4;
    } else {
	ExceptionHandler_NonSyscall(which, type);
    }	
}


